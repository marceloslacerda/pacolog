#!/usr/bin/env bash
#
# Copyright 2016 Lee M. Yeoh (email: "plast-dot-id-dot-au" follows "gitlab")
# This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
# This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# List recent commits for an Arch Linux package (specified as the script's argument)
# Optionally, only display the first NUM commits, using -l NUM.

# Define usage.
usage() {
  cat >&2 <<EOF
Usage: $0 [-l NUM] PACKAGE_NAME | -h
  -l NUM      optionally, only display NUM latest entries
  -h          display this help text and exit
EOF
  exit 1
}

# Parse options.
while getopts 'l:h' opt; do
  case "${opt}" in
    l) length=$OPTARG ;;
    *) usage ;;
  esac
done

# Check -l argument. If $length is empty, then equivalent to flag never being specified. Zero is okay (NOP), negative is not.
if ! [[ $length =~ ^[0-9]*$ ]]; then
  echo 'ERROR: wrong argument supplied to -l'
  usage
  exit 1
fi

shift $((OPTIND-1))

# Check primary argument(s)
if [[ $# != 1 ]]; then
  echo 'ERROR: specify a single package as argument'
  usage
  exit 1
fi

# Determine package's repository
repo=$(pacman -Spdd --print-format %r ${1} 2>/dev/null)

# Determine base package, and start to build url
package_page=$(w3m -dump "https://www.archlinux.org/packages/${repo}/x86_64/${1}/")
base=$(sed -nr 's/^\s*Base Package:\s*(\S*)$/\1/p' <<<"${package_page}")
if [ -z "$base" ]; then
  base="${1}"
fi

case $repo in
core|extra|testing)
  pre_url='https://projects.archlinux.org/svntogit/packages.git/log/trunk?h=packages/'
  ;;
community|multilib)
  pre_url='https://projects.archlinux.org/svntogit/community.git/log/trunk?h=packages/'
  ;;
'') # AUR or package not found
  pre_url='https://aur.archlinux.org/cgit/aur.git/log/?h='
  ;;
*)
  echo "ERROR: Unknown repository returned (\"${repo}\")" >&2
  exit 1
  ;;
esac

post_url='&showmsg=1'

# Determine terminal's width. Fall back to 80.
term_width=$(tput cols); term_width=${term_width:-80}

# Parse commit log
output=$(w3m -cols ${term_width} -dump "${pre_url}${base}${post_url}" | sed -n '/Commit message/,/^\s*$/p')

# Check for presence of log
if [ -z "$output" ]; then
  echo "ERROR: no log found for ${1}"
  exit 1
fi

# Remove "(Collapse)" from header
clean_output="$(<<<"$output" sed '1 s/(Collapse)/          /')"

# Truncate if necessary
if [ -z $length ]; then
  echo "$clean_output"
else
  <<<"$clean_output" gawk -v l=$length 'BEGIN {nth=0}; /^\s/ {print; next} {if (nth == l){exit} else {print}; nth++}'
fi
